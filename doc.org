* Basic link setup
The basic syntax for configuring network links is:

#+BEGIN_EXAMPLE
    link_defintion {
        link_configuration; # addresses, sublinks etc
    };
#+END_EXAMPLE

The following example configures address 10.9.0.1 on hardware device
eth0.

#+BEGIN_EXAMPLE
    link dev eth0 {
        static { address 10.9.0.1/24; };
    };
#+END_EXAMPLE

You can also rename interfaces using =name= option.

#+BEGIN_EXAMPLE
    link dev ens0 {
        name eth0;
        static { address 10.9.0.1/24; };
    };
#+END_EXAMPLE

Note that in =link dev= command you always need to specify the original
interface name (given by udev or kernel, =ens0= in this case), not the
target name (=eth0= in this case).

* Network namespaces
Use bare =namespace XXX;= command to declare that network namespace
named =XXX= is managed by netd.

#+BEGIN_EXAMPLE
    namespace mynet;
#+END_EXAMPLE

Then you can add =namespace XXX;= declaration to link, for example:

#+BEGIN_EXAMPLE
    link dev eth0 {
        namespace mynet; # move interface eth0 to network namespace mynet
        static { address 10.9.0.1/24; };
    };
#+END_EXAMPLE

** Network/User namespaces interactions

/Security Warning/: don't ask netd to manage network namespaces having
different owning user namespaces. =root= in the the child user namespace
could use that to manipulate network traffic in parent user namespace.

* Link addressing
** Static addressing

Example

#+BEGIN_EXAMPLE
    link dev eth0 {
        # Configure address and the default gateway.
        static {
            address 10.9.0.15/24;
            gateway 10.19.0.1;
        };

        # Configure another address on the same interface
        static {
            address 10.10.0.1/24;
        };
    };
#+END_EXAMPLE

All options:

#+BEGIN_EXAMPLE
    static {
        address ip/mask; # IP address and subnet mask (required)
        gateway ip; # IP of the default route (optional)
        peer_address ip/mask; # peer IP address in case of point-to-point links (optional)
    };
#+END_EXAMPLE

** DHCP addressing

Obtaining address using DHCP is straightforward:

#+BEGIN_EXAMPLE
    link dev eth0 {
        dhcp {};
    };
#+END_EXAMPLE

* Interfaces
** Hardware/external interfaces

Use =link dev= to match hardware interface or interface created by another program.

#+BEGIN_EXAMPLE
link dev ens0 {
    ...
};
#+END_EXAMPLE
** Bridges

=bridge= command creates a new bridge.

#+BEGIN_EXAMPLE
bridge mybr0 {
    ports ens0 ens1;
};
#+END_EXAMPLE
** Veth (virtual ethernet)

=veth= creates a new virtual ethernet cable. It is mainly used for connecting two network namespace.

#+BEGIN_EXAMPLE
veth test {
    left { # interace name = test.l
       namespace f1;
       ...
    };
    right {  # interace name = test.r
       ...
    };
};
#+END_EXAMPLE
** VLAN (802.1s)

=vlan= command can be used inside link declaration to create VLAN interfaces on a given link.

#+BEGIN_EXAMPLE
link dev ens0 {
    vlan 100 {
        name v100; # rename from ens0.vlan100 to v100
    };
    vlan 101 {
        static { address 192.168.0.1/24; }
    };
};
#+END_EXAMPLE

* Tunnels/VPNs
** OpenVPN point-to-point

OpenVPN point-to-point configuration establishes L3 tunnel between two hosts.

#+BEGIN_EXAMPLE
openvpn_ptp ovpnclient {
    connect udp 10.9.0.3 7000;
    key ./openvpn_shared_key; # generate this file with `openvpn --genkey --secret openvpn_shared_key`

    static { # configure address (this is just normal example of static addressing)
        address 10.10.0.2;
        peer_address 10.10.0.3;
    }
};

openvpn_ptp ovpnserver {
    listen udp 0.0.0.0 7000; # listen on UDP port 7000 on all interfaces
    key ./openvpn_shared_key;

    static {
        address 10.10.0.3;
        peer_address 10.10.0.2;
    }
};
#+END_EXAMPLE

** WireGuard

WireGuard is a modern VPN that utilizes state-of-the-art cryptography (http://wireguard.io).
It can run both in kernel and in userspace.

#+BEGIN_EXAMPLE
wireguard wg0 {
    namespace foo; # move interface to namespace foo
    connection_namespace root; # send packets from root namespace
    private_key [key];
    listen 4567;

    peer {
        public_key [key];
        allowed_src 10.0.0.9; # allow only packets from this address
        connect 192.95.5.69 41414;
    };
    peer {
        public_key [key];
        allowed_src 192.168.0.0/16;
        # there is no `connect` - this peer will have to initiate connection
    };
};
#+END_EXAMPLE

** ZeroTier
ZeroTier is a planet-scale smart Ethernet switch.

#+BEGIN_EXAMPLE
zerotier default {
    secret "62526ca27f:0:d3806f5bca3e55b0fe6076fa5077888b10957e9b7108cc8ae2ce351e39137e0877804d4199c73ad75c81266217a59faffc3ab8ca6ba5f3983c4649958a9fb6e9:db0d60eadaf062b2567aff4b573f86e2702b7f924b478e2b06e8df2a94a2fd16fb468cb60309b06e84db558c450b0b22d8eb3c6ea82bf93b8a81c341beb33d29";
    port 9993; # optional
    namespace root; # namespace for making ZeroTier connection

    network 8056c2e21c000001 {
        name zt0;
        managed; # allow network controller to assign local IP addresses and routes
        global; # allow network controller to assign global IP addresses and routes
    };

    network 1234567899000001 {
        name zt1;
        static {
            # assign address manually
            address 10.88.0.2/16;
            route 10.89.0.0/16 via 10.88.0.1;
        };
    };
};
#+END_EXAMPLE

* Wireless setup

#+BEGIN_EXAMPLE
    # use device named wlan0
    link dev wlan0 {
        # Configure AP on device wlan0
        wireless_ap default {
            ssid mynet1; # network name
            keymgmt wpa2_psk; # network security
            passphrase HelloWorld99; # network passphrase

            static { # configure IP address (and route)
                address 10.9.0.1/24;
            };

            dhcp_server { # configure DHCP server
                addresses 10.9.0.10 10.9.0.200;
                subnet 24;
                nameserver 8.8.8.8;
                router 10.9.0.1;
            };
        };
        # Configure other AP on device mywlan
        # Multiple access points are not supported on all network cards.
        wireless_ap foo {
            name mywlan; # change device name, default would be wlan0.vif-foo
            ssid mynet2;
            keymgmt none; # open network
            share_internet 10.10.0.0/24; # shortcut for static address, dhcp server and iptables MASQUERADE
        };
    };
#+END_EXAMPLE

* DBUS interface

** Loading fragments

netd allows loading of configuration fragments in runtime. This is
useful for apps that need to apply programatically generated
configuration.

Example:

#+BEGIN_EXAMPLE
    dbus-send --print-reply --type=method_call --system /net/networkos/netd --dest=net.networkos.netd net.networkos.netd.Fragments.LoadFragment 'string:myfragment' "string:bridge mybr0 { port eth0; };"
    dbus-send --print-reply --type=method_call --system /net/networkos/netd --dest=net.networkos.netd net.networkos.netd.Core.Reload
#+END_EXAMPLE
